# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking for Verifying Multi-Threaded Programs.
// ----------------------------------------------------------------------

#include includes/bmc.properties

// this automaton defines which locations are the error locations
specification = specification/default.spc

#include includes/resource-limits.properties

cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.threading.ThreadingCPA, \
                    cpa.predicate.PredicateCPA, \
                    cpa.assumptions.storage.AssumptionStorageCPA, \
                    cpa.loopbound.LoopBoundCPA, \
                    cpa.value.ValueAnalysisCPA

# Some traversal heuristics are not useful for concurrent programs
analysis.traversal.useReversePostorder          = false
analysis.traversal.useCallstack                 = false
analysis.traversal.useReverseLoopstack          = false
analysis.traversal.useReverseLoopIterationCount = false

# Number of threads should be irrelevant, but have a huge impact on performance.
analysis.traversal.useNumberOfThreads  = false

cpa.callstack.unsupportedFunctions={}
cfa.useCFACloningForMultiThreadedPrograms=true

# do not use the original functions from the CFA, but cloned ones.
cpa.threading.useClonedFunctions = true

# prevent the stop-operator from aborting the stop-check early when it crosses a target state
cpa.arg.coverTargetStates = false

# the loop unrolling bound
cpa.loopbound.maxLoopIterations = 10
# enable stack-based tracking of loops
cpa.loopbound.trackStack = false

# Use merge^{JOIN} for value analysis alongside predicate to prevent unnecessary unrolling
cpa.value.merge = JOIN
