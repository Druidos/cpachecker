# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of different analyses to be called from the Selection Algorithm.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'18
specification = specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
termination.violation.witness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms=true

# The analyses used for reachability properties.
restartAlgorithm.configFiles = components/configselection-restartcomponent-kInduction.properties, components/svcomp18--recursion.properties::if-recursive, components/svcomp18--concurrency.properties::if-concurrent, components/configselection-restartcomponent-predicateAnalysis-end.properties

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = svcomp18--memorysafety.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = svcomp18--overflow.properties

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = svcomp18--termination.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipFunctionPointerRecursion = true
# We set skipVoidRecursion per component
# cpa.callstack.skipVoidRecursion = true

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

limits.time.cpu::required = 900
