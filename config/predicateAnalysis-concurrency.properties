# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et.al.).
# Verifying Multi-Threaded Programs.
# ----------------------------------------------------------------------

#include includes/predicateAnalysis-ABEl.properties

#include includes/predicateAnalysis-PredAbsRefiner.properties

#include includes/resource-limits.properties
specification = specification/default.spc

analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.threading.ThreadingCPA, cpa.predicate.PredicateCPA

analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = false
# handle states with a deeper callstack first. This needs the CallstackCPA instance to have any effect.
analysis.traversal.useCallstack        = false
# handle abstract states with fewer running threads first? (needs # ThreadingCPA)
analysis.traversal.useNumberOfThreads = false

cpa.callstack.unsupportedFunctions={}
cfa.useCFACloningForMultiThreadedPrograms=true

# do not use the original functions from the CFA, but cloned ones.
cpa.threading.useClonedFunctions = true

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.satCheckAtAbstraction = true

# instead of precise conditional branching points, we have thread interleavings.
counterexample.export.allowImpreciseCounterexamples = true

# we require all thread interleavings, lets disable block summaries.
cpa.composite.aggregateBasicBlocks = false
