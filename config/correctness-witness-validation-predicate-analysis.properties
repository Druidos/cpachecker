# ---- Witness Validation using Predicate Analysis ----

// To enable validation provide in the command the path to the original specification with -spec and the path to the witness file with -witness

// Necessary self reference
witness.validation.correctness.config = correctness-witness-validation-predicate-analysis.properties

# --- Options for using an invariants specification automaton (ISA) ---

witness.validation.correctness.isa=true

witness.invariantsSpecificationAutomaton=WITNESSBASED_ISA
// Alternatives: TWOSTATES_ISA, CFABASED_ISA
 

# --- Options for predicate analysis ---

analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

cegar.refiner = cpa.predicate.PredicateRefiner

cpa.predicate.refinement.performInitialStaticRefinement = true

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops = true

[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true


